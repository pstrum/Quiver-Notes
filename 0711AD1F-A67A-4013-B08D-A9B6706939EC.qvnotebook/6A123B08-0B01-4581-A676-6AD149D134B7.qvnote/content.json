{
  "title": "The Maximum Subarray",
  "cells": [
    {
      "type": "markdown",
      "data": "## My Research!\nAnswer is below..."
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// Create array or arrays to check\nvar arr = input.split(/\\n/);\nvar onlyArrays = arr.filter(function(element, index) {\n  // Make a new array with only the odd elements\n  return index % 2 !== 1;\n});\n// Remove the first value\nonlyArrays.splice(0, 1);\n\nfunction maxsub(arr) {\n  \"use strict\";\n  // Sum of the current subarray\n  var current = 0;\n  // Greatest sum so far\n  var greatest = 0;\n  \n  // Loop through the array\n  for (let i = 0; i < arr.length; i++) {\n    // What's bigger: current total, or current total + current value?\n    current = Math.max(0, current + arr[i]);\n    // What's bigger: the greatest sum or current sum?\n    greatest = Math.max(greatest, current);\n  }\n  return greatest;\n}\n\nfunction maxNonCont(arr) {\n  // Total of positive elements\n  var total = 0;\n  // Loop through the array\n  for (let i = 0; i < arr.length; i++) {\n    // Check to see if the current value is greater than 0\n    if (arr[i] > 0) {\n      // If it is then it to the total\n      total += arr[i];\n    }\n  }\n  return total;\n}\n\n"
    },
    {
      "type": "markdown",
      "data": "## The Maximum Subarray\n\nGiven an array A={a1,a2,…,aN} of N elements, find the maximum possible sum of a\n\n1. Contiguous subarray\n2. Non-contiguous (not necessarily contiguous) subarray.\n\nEmpty subarrays/subsequences should not be considered.\n\n[This Youtube video by Ben Wright might be useful to understand the Kadane algorithm for the maximum subarray in a 1-D sequence.](https://youtu.be/EK71U-vTOt4)\n\n### Input Format\nFirst line of the input has an integer T. T cases follow. \nEach test case begins with an integer N. In the next line, N integers follow representing the elements of array A.\n\n### Constraints:\n1≤T≤10\n1≤N≤105\n−104≤ai≤104\n**The subarray and subsequences you consider should have at least one element.**\n\n### Output Format\nTwo, space separated, integers denoting the maximum contiguous and non-contiguous subarray. At least one integer should be selected and put into the subarrays (this may be required in cases where all elements are negative).\n\n### Sample Input\n```\n2 \n4 \n1 2 3 4\n6\n2 -1 2 3 4 -5\n```\n### Sample Output\n```\n10 10\n10 11\n```\n\n### Explanation\nIn the first case: \nThe max sum for both contiguous and non-contiguous elements is the sum of ALL the elements (as they are all positive).\n\nIn the second case: \n[2 -1 2 3 4] --> This forms the contiguous sub-array with the maximum sum. \nFor the max sum of a not-necessarily-contiguous group of elements, simply add all the positive elements."
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "function processData(input) {\n  //Enter your code here\n  \"use strict\";\n  // Create array or arrays to check\n  var arr = input.split(/\\n/);\n  var onlyArrays = arr.filter(function(element, index) {\n    // Make a new array with only the odd elements\n    return index % 2 !== 1;\n  });\n  // Remove the first value\n  onlyArrays.splice(0, 1);\n  \n  onlyArrays.forEach(function(element) {\n    var makeArray = element.split(\" \");\n    var int1 = maxsub(makeArray);\n    var int2 = maxNonCont(makeArray);\n    if (int1 < 0) {\n      int2 = int1;\n    }\n    console.log(int1 + \" \" + int2);\n  });\n  \n  function maxsub(arr) {\n    // Sum of the current subarray\n    var current = Number(arr[0]);\n    // Greatest sum so far\n    var greatest = Number(arr[0]);\n    // Loop through the array\n    for (let i = 1; i < arr.length; i++) {\n     var value = parseInt(arr[i]);\n     // What's bigger: current total, or current total + current value?\n     current = Math.max(value, current + value);\n     // What's bigger: the greatest sum or current sum?\n     greatest = Math.max(greatest, current);\n    }\n    return greatest;\n  }\n  \n  function maxNonCont(arr) {\n    // Total of positive elements\n    var total = 0;\n    // Loop through the array\n    for (let i = 0; i < arr.length; i++) {\n      // Check to see if the current value is greater than 0\n      if (Number(arr[i]) > 0) {\n        // If it is then it to the total\n       total += Number(arr[i]);\n      }\n    }\n    return total;\n  }\n}"
    }
  ]
}