{
  "title": "Explain how `this` works in JavaScript",
  "cells": [
    {
      "type": "markdown",
      "data": "## First I'll explain what `this` is:\nEvery single function in JavaScript, while it is **executing**, has a reference to its current execution context, which is called `this`.\n\n### Execution Context\nWhen a function is called, how is it called?\n\n`this` tells the lexical scope of JavaScript where to find \n\n`this` will always reference an object. The metaphor I see most often, and specifically from Kyle Simpson, is the `this` can be thought of like the address to  building that you can then enter and go up floor by floor to access what you need. This is a big part of object oriented programing, because when you create a `new` object using a constructor function, `this` will then point to the new object that was created and it can trace back up the prototype linkage to find what you need.\n\n## Default Binding Rule\n- If you are in `'use strict';` mode (defined within the function), `this` will be defaulted to the `undefined` value.\n- If you aren't, default the `this` keyword to the global object."
    }
  ]
}